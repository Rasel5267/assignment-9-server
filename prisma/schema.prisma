// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
    id       String @id @default(uuid())
    email    String @unique
    role     String
    password String

    admin   Admin?  @relation(fields: [adminId], references: [id])
    adminId String? @unique

    customer   Customer? @relation(fields: [customerId], references: [id])
    customerId String?   @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model Customer {
    id        String @id @default(uuid())
    email     String @unique
    name      String
    contactNo String
    address   String

    user    User?
    orders  Order[]
    reviews Review[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("customers")
}

model Admin {
    id        String @id @default(uuid())
    email     String @unique
    name      String
    contactNo String
    address   String

    user User?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("admins")
}

model TourPackage {
    id          String   @id @default(uuid())
    packageName String
    description String
    activities  String[]

    totalCapacity  Int @default(0)
    bookedSpots    Int @default(0)
    availableSpots Int @default(0)

    duration      Int
    price         Float
    departureDate DateTime
    returnDate    DateTime
    status        TourPackageStatus @default(UPCOMING)

    destination   Destination @relation(fields: [destinationId], references: [id])
    destinationId String

    orders  Order[]
    reviews Review[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("tour-packages")
}

model Order {
    id          String      @id @default(uuid())
    quantity    Int         @default(1)
    price       Float
    travelDate  DateTime
    orderStatus OrderStatus @default(PENDING)

    customer      Customer @relation(fields: [customerEmail], references: [email])
    customerEmail String

    tourPackage   TourPackage @relation(fields: [tourPackageId], references: [id])
    tourPackageId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("orders")
}

model Destination {
    id              String        @id @default(uuid())
    destinationName String
    description     String
    imageUrl        String
    tourPackages    TourPackage[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("destinations")
}

model Review {
    id            String      @id @default(uuid())
    rating        Float
    comment       String
    customer      Customer    @relation(fields: [customerEmail], references: [email])
    customerEmail String
    tourPackage   TourPackage @relation(fields: [tourPackageId], references: [id])
    tourPackageId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("reviews")
}

model Blog {
    id          String @id @default(uuid())
    title       String
    description String
    image       String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("blogs")
}

model Faq {
    id       String @id @default(uuid())
    question String
    answer   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("faqs")
}

enum TourPackageStatus {
    UPCOMING
    ONGOING
    FINISHED
}

enum OrderStatus {
    PENDING
    APPROVED
    COMPLETED
}
